<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAYAAAASAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAFQAA
        ABUAAAAVAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAEgAA
        AAYAAAAAAAAAAAAAAAAAAAANAAAARAAAAHwAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAA
        AIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAAAIgAAACIAAAAiAAA
        AIgAAAB8AAAARAAAAA0AAAAAAAAAAgAAADcODg69Ghoa/BsbG/8dHR3/Hh4e/x0dHf8fHx//Hh4e/yAg
        IP8iIiL/ICAg/yIiIv8hISH/IyMj/yMjI/8hISH/IiIi/yAgIP8hISH/ISEh/x4eHv8fHx//HR0d/x4e
        Hv8eHh7/Gxsb/xoaGvsMDAy8AAAANwAAAAIAAAAGAgICVxwcHPwfHx//ICAg/x8fH/8iIiL/ISEh/yAg
        IP8gICD/ISEh/yIiIv8hISH/IiIi/yEhIf8fHx//Hx8f/yEhIf8iIiL/IiIi/yEhIf8jIyP/IiIi/yIi
        Iv8hISH/ISEh/yIiIv8hISH/ICAg/xwcHPsAAABTAAAABgAAAAYICAhfISEh/yEhIf8gICD/WVlZ/x4e
        Hv8hISH/Tk5O/yoqKv8kJCT/JSUl/ycnJ/8jIyP/JiYm/0A/P/9BQED/JiYm/yQkJP8oKCj/JSUl/ycn
        J/8mJib/KCgo/0xMTP88PDz/ICAg/ycnJ/8jIyP/IiIi/wAAAFYAAAAGAAAABgUFBV4gICD/JiYm/01N
        Tf+Uk5P/bWxs/0xMTP+RkJD/bm5u/ygoKP8qKir/JSUl/ykpKf8kJCT/Y2Nj/2NjY/8lJSX/KSkp/ycn
        J/8rKyv/Kysr/zQ0NP+VlJT/e3p6/5GRkP9gYGD/JSUl/ycnJ/8hISH/AAAAVQAAAAYAAAAGCAgIXCQk
        JP8mJib/KSkp/1VVVf9ubW3/a2pq/2dnZ/8qKir/KCgo/ywsLP8sLCz/Nzc3/0FBQf9AQED/QUBA/0FB
        Qf84ODj/LCws/yoqKv8sLCz/VlVV/2JhYf8rKyv/QUFB/2NjY/8qKir/KCgo/ycnJ/8AAABUAAAABgAA
        AAYFBQVbJCQk/yoqKv8lJSX/R0dH/3Bvb/9wbm7/YF9f/yQkJP8vLy//Ly8v/ywsLP9eXl7/fHt7/3t7
        e/97e3v/fHt7/15dXf8rKyv/Ly8v/y0tLf9XV1f/W1ta/yYmJv8tLS3/Ojk5/ysrK/8uLi7/JSUl/wAA
        AFIAAAAGAAAABggICFonJyf/LS0t/1BQUP+lpaX/gICA/2JiYv+kpKT/dHR0/zExMf8zMzP/MjIy/zEx
        Mf8vLy//PT09/z09Pf8uLi7/Ly8v/zAwMP8vLy//MTEx/01NTf+npqb/Z2dn/4+Ojv+Eg4P/Li4u/y0t
        Lf8pKSn/AAAAUgAAAAYAAAAGCAgIWSkpKf8qKir/MDAw/3Nzc/8vLy//MDAw/2ZmZv8+Pj7/Ly8v/zAw
        MP8yMjL/LS0t/zExMf9tbGz/bW1t/zExMf8uLi7/NDQ0/y8vL/8yMjL/MzMz/1JSUv+AgID/cHBw/zY2
        Nv8yMjL/LCws/ysrK/8AAABRAAAABgAAAAUICAhYJiYm/y4uLv8rKyv/MjIy/zAwMP8qKir/MDAw/y0t
        Lf8wMDD/MTEx/ywsLP8xMTH/LS0t/y4uLv8uLi7/LS0t/zIyMv8uLi7/MzMz/zMzM/8vLy//MzMz/y8v
        L/80NDT/MzMz/y8vL/8vLy//Jycn/wAAAE8AAAAGAAAABQgICFcpKSn/LCws/zExMf8vLy//S0tL/1hY
        WP8sLCz/MTEx/y4uLv8yMjL/MjIy/y8vL/8yMjL/Ly8v/zIyMv8yMjL/MDAw/zMzM/8wMDD/MTEx/yUl
        Jf8kJCT/JSUl/yQkJP8nJyf/Ly8v/y4uLv8tLS3/AAAATgAAAAUAAAAFCAgIVigoKP8vLy//LS0t/y0t
        Lf9mZWX/fHx8/ysrK/8vLy//NDQ0/zU1Nf8zMzP/MTEx/y0tLf8uLi7/Li4u/y0tLf8wMDD/MTEx/zQ0
        NP8pKSn/bWxs/2dnZ/9nZ2f/Z2dn/2dnZ/89PT3/MzMz/yoqKv8AAABNAAAABQAAAAUJCQlVKysr/zEx
        Mf9AQED/TEtL/1xbW/9hYGD/TEtK/0lISP80NDT/OTk5/zc3N/9ERET/UFBQ/1BQUP9QUFD/UFBQ/0JC
        Qv80NDT/NDQ0/zAwMP+Dg4P/goKC/4KCgv+BgYH/g4OD/0VFRf8yMjL/Li4u/wAAAEwAAAAFAAAABQkJ
        CVQtLS3/Li4u/1tbW/9+fn7/e3p6/3l5eP9+fn3/b25u/zExMf82Njb/ODg4/21tbf+Wlpb/lZWU/5WV
        lf+Wlpb/bW1t/zg4OP81NTX/Li4u/05OTv9KSUn/S0tL/0pJSf9MS0v/Nzc3/zIyMv8xMTH/AAAASwAA
        AAUAAAAFCQkJUykpKf8zMzP/MDAw/zU1Nf9xcXH/i4qK/zQ0NP8yMjL/Ojo6/zo6Ov82Njb/OTk5/zIy
        Mv83Nzf/ODg4/zExMf81NTX/MjIy/zc3N/8tLS3/n56e/5ubmv+bmpr/m5ua/5ubmv9LS0v/NjY2/ysr
        K/8AAABKAAAABQAAAAUJCQlSLi4u/zExMf83Nzf/NTU1/3Fxcf+JiYn/MzMz/zo6Ov83Nzf/OTk5/zo6
        Ov82Njb/Ojo6/zY2Nv84ODj/OTk5/zY2Nv85OTn/NTU1/zk5Of80NDT/MDAw/zQ0NP8wMDD/NTU1/zY2
        Nv8zMzP/MDAw/wAAAEkAAAAFAAAABQkJDFMmKUD/KS1G/yovSP8qMEr/KS9I/ykuSP8qL0f/Ki1E/you
        R/8qLkb/Ki9I/yoxS/8rMkr/KzJL/ysyTP8rMUr/KzJM/yovSf8qL0f/Ky9H/ysuRf8rMEj/LDFK/ysx
        S/8rMUv/Ky9J/youSP8nKkH/AwMGSgAAAAUAAAAFBgkSUQYnkv8MMZn/Ci6Z/wotmf8JLpv/CCaL/wgl
        iv8HH37/Bx57/wclhv8IMpn/Ci6Q/wo0lf8LK3//Cyt//wo0lf8KLpD/CDKZ/wcmhv8IH3z/CB9+/wgl
        iv8IJov/CS6a/wktmf8KMJz/Ci+Y/wYmkf8AAw1KAAAABQAAAAUAAwpJBx+A/xQujf8ULYz/Hjub/yM/
        mP8kPZT/Jj2Q/yg5hv8qPIb/K0OV/yxNpf8vWK//Ml2x/y5Zrv8uUaX/MVOk/zBWrP8tTqT/K0KQ/yY7
        if8jN4b/Jz6Q/yM8k/8hOo//HDeU/xErjP8QKov/Bx9//wAACkgAAAAFAAAABQADDkcHL6j/Ej+6/xA8
        qf8XITr/HyQ0/x8jM/8fJDT/HyIw/xsfLv8dIjL/HyU1/yAmN/8gKDj/Hyc3/xwiMv8fJDX/HyY2/yAo
        OP8gKDj/HSQ0/yAnOP8gJDP/ICQ1/x8mN/8YIz3/ED6t/w89uf8HLqj/AAMRRwAAAAUAAAAEAAMSRgs0
        q/8bQ7P/EjKM/yYmJv8uLi7/MjIy/y4uLv8vLy//Xl5e/ycnJ/8uLi7/LS0t/y4uLv8vLy//Ghoa/y8v
        L/8uLi7/LS0t/y4uLv8dHR3/Ly8v/y8vL/8tLS3/Li4u/yYmJv8QMY7/Fj6x/wozq/8AAxJGAAAABAAA
        AAQAAxJEDzSo/yNKuv8XOZL/JSQl/zw8PP9zc3P/jY2N/y0tLf9OTk7/IyMj/ywsLP9vb2//Ly8v/y0t
        Lf8SEhL/LS0t/y0tLf9vb2//Ly8v/xcXF/8sLCz/LCws/3Jycv8sLCz/JSUl/xQ3kv8aQ7f/DTOo/wAD
        EkUAAAAEAAAABAADEkQRNaj/LlO9/x9Dmv8tLS3/MzMz/zExMf+UlJT/ODg4/wYGBv8lJSX/MzMz/3p6
        ev82Njb/MjIy/xMTE/95eXn/jIyM/6qqqv9paWn/Ghoa/zIyMv8zMzP/fX19/zMzM/8tLS3/GD6a/x5H
        uf8PM6f/AAMSRAAAAAQAAAAEAAMTQxU9r/88X8T/KkiY/0NCQ/88PDz/iIiI/1dXV/9HR0f/HBwc/z4+
        Pv88PDz/ampq/z8/P/9HR0f/JSUl/0dHR/91dXX/ampq/0pKSv8pKSn/RkZG/zw8PP9tbW3/PDw8/0ND
        Qv8dPpf/I0u8/xE6rv8AAxNDAAAABAAAAAQAAxNBFjem/0djv/8xSZL/WFdX/2xsbP+Hh4f/o6Oj/2Zm
        Zv9KSkr/X19f/3Jycv+wsLD/ZWVl/2dnZ/9SUlL/ZmZm/29vb//AwMD/ZGRk/1ZWVv9mZmb/fn5+/6Oj
        o/9nZ2f/V1dY/yE8jf8nSLT/EjOk/wADE0EAAAAEAAAABAADD0AXN5X/TmOq/zdHff9VVVX/b29v/4aG
        hv+Dg4P/Z2dn/05OTv9gYGD/Z2dn/3BwcP9nZ2f/aGho/1VVVf9nZ2f/Z2dn/3d3d/9nZ2f/Wlpa/2dn
        Z/9nZ2f/b29v/2dnZ/9TU1P/Jjh1/y1InP8TNJT/AAMPQAAAAAQAAAADAAQMPBI1mv9TaLP/VGem/zI2
        Rf89QUj/PUBH/z5BSP89QEb/MjQ7/zk8Qv8+QEf/PT9F/z1AR/87Pkb/NTlA/z1AR/89QEb/PT5E/z0/
        Rf81OD//PUBH/z1BSP89QEf/PT9G/ysvO/8/Wqb/OlKm/xI1m/8ABAw8AAAAAwAAAAEAAAAjByB49ztW
        qP94jcj/c4nG/3CHw/9vhL7/b4O9/26AuP9vgbj/boS9/26Ixv9wisf/cIvH/2+Jwf9viMH/b4rG/22I
        xf9rhsT/a4C7/2p9tv9pfLX/aX66/2h9u/9ogL//aH/A/2yExP8xTaP/ByB49wAAACMAAAABAAAAAAAA
        AAcGFUd2DSJi9Bgwe/8aNYj/GjiM/xo2jP8bN43/GzWK/xs2jv8bOpf/HEKl/x5Fp/8fR6j/HkSi/x5E
        ov8fR6j/HUWo/xxCpf8bO5j/GzeQ/xs1jf8bN5D/GjaO/xo4j/8ZNov/GDF9/w0iZPQGFUV2AAAABwAA
        AAAAAAAAAAAAAAAAAAMAAAALAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAA
        AAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAACwAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwAAAA4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACAAAABwAAAA/////8=
</value>
  </data>
</root>